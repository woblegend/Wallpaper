// Flag:Version=1.4

// This is the JavaScript file that provides dynamic functionality for
// the HTML pages generated by the img_gallery.xml XSLT stylesheet
// http://www.photogallerygenerator.com
//
//       This file has been designed from the sources published by Philip J. Guo
//       based on the People Photo Gallery Project
//       by Philip J. Guo (Created January 2005)
//       Copyright 2005 Philip J. Guo
//       http://alum.mit.edu/www/pgbovine/
//
//     This script is free, You can redistribute it and/or modify
//     it under the terms of the GNU General Public License as published by
//     the Free Software Foundation; either version 2 of the License, or
//     (at your option) any later version.

//     This program is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU General Public License for more details.

//     You should have received a copy of the GNU General Public License
//     along with this program; if not, write to the Free Software
//     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


// GUI Elements
var title;
var photoDescription;
var date;
var mapLocation;
var imgFullsize;
var MainDisplayPanel;
var ThumbnailsPanel;
var ToggleThumbnailsLink;
var selectedImage;
var photoSlider;
var picIndex;
var totalPicNum;
var GalleryTitle;
var mySlideShow;
var SlideShowRunning = false;
var sliderOffset;

// Global variables:
var MainDisplayPanelShown = true;
var numImages = 0;
var images = new Array(); // Initialize to array of MyImage objects
var galleryName = ''; // Initialize when processing XML files
var folderName = ''; 
var imagesFullsize = '';

var imageMap = 'sources/img_map.gif';
var imageStop = 'sources/img_stop.gif';
var imagePlay = 'sources/img_play.gif';
var imageBlank = 'sources/img_blank.gif';

var thumb_folder = 'thumbnails/';
var image_folder = 'images/';

var size_multiplier = 1;

// Indicat nb image in slider (value must be 3 or 5)
var nbSlider = 5; // Flag:NbSlider

// The index of the image currently displayed in full
var currentIndex = 0;

// The index of the previous image which you visited
// right before this one (useful for loading the data
// from the image at previousIndex to currentIndex)
var previousIndex = 0;

// The index of the image currently in the center of the slider
// (this may or may not be equal to currentIndex)
var centerIndex = 0;

// The absolute horizontal position of the slider strip
// Do not insert this directly into the 'span'
var horizontalPos = 0;

// The total width occupied by an image in the slider, including spacing and margins
var totalImageWidth = 150;

//Specify the slider's width and height (in pixels)
// Note that these are NOT used to draw the slider on the page -
// Now it is hardcoded into #SliderWrapper in the HTML file
var sliderwidth =(nbSlider * totalImageWidth) + "px";
var sliderheight = "142px";

// Initialize in InitializeSlider():
var actualwidth = 0;

//Specify the slider's slide speed (larger is faster 1-10 - needs to be multiple of 5)
var slidespeed = 10;
	  
var timerVal;
var buttonHeldDown = false;
var isSliding = false; // Don't allow anything to be done while the slider is sliding
var mod = 0;

var jumptime;
var slideCount = 1;

// This WILL change if totalImageWidth changes or the jump methods won't work properly
var rapidSlideSpeed = (2 * 15);

window.onresize = checkBrowserWidth;

// Super-simple implementation of the MyImage class:

// MyImage object methods

// "filename" is a String
function Image_getFilename() {
  return this.filename;
}

// "title" is a String
function Image_getTitle() {
  return this.title;
}

// "description" is a String
// "description" isn't required to have content - it may be left blank
function Image_getDescription() {
  return this.description;
}

// "location" is a String
// "location" isn't required to have content - it may be left blank
function Image_getLocation() {
  return this.location;
}

// "date" is a String
// "date" isn't required to have content - it may be left blank
function Image_getDate() {
  return this.date;
}

// "width" is an int
function Image_getWidth() {
  return this.width;
}

// "height" is an int
function Image_getHeight() {
  return this.height;
}

// Returns a string that replaces " with \"
function sanitize_quotes(str) {
  return str.replace(/"/g, '\\\"');
}

// Ok, this is REALLY IMPORTANT!  DO NOT name this class Image, because
// when it used to be named Image, Safari TOTALLY BARFED!  Apparently, there is 
// already a built-in Image class, and all other browsers override it with my
// custom-defined Image class ... except for Safari!  Thus, the moral of the
// hour is to not name your classes the same thing as built-in classes :)
// (Of course, Safari could've issued me some sort of warning, but oh well)

// Constructor for MyImage object
function MyImage(fn, titl, desc, dat, loc, w, h) {
  this.filename = fn;
  this.title = titl;
  this.description = desc;
  this.date = dat;
  this.location = loc;
  this.width = w;
  this.height = h;
  this.directoryName = "";
}

// Forces prototype object to be created:
new MyImage("", "", "", "", "", 0, 0);

// Define methods of Image class via an object prototype:
MyImage.prototype.getFilename = Image_getFilename;
MyImage.prototype.getTitle = Image_getTitle;
MyImage.prototype.getDescription = Image_getDescription;
MyImage.prototype.getDate = Image_getDate;
MyImage.prototype.getLocation = Image_getLocation;
MyImage.prototype.getWidth = Image_getWidth;
MyImage.prototype.getHeight = Image_getHeight;

function InitGallery() {
  // Initialize GUI elements
  selectedImage = document.getElementById ? 
    document.getElementById("selectedImage") : 
    document.all.selectedImage;

  photoSlider = document.getElementById ? 
    document.getElementById("SliderContents") : 
    document.all.SliderContents;

  picIndex = document.getElementById ? 
    document.getElementById("picIndex") : 
    document.all.picIndex;

  totalPicNum = document.getElementById ? 
    document.getElementById("totalPicNum") : 
    document.all.totalPicNum;

  GalleryTitle = document.getElementById ? 
    document.getElementById("GalleryTitle") : 
    document.all.GalleryTitle;

  title = document.getElementById ? 
    document.getElementById("title") : 
    document.all.title;
    
  photoDescription = document.getElementById ? 
    document.getElementById("photoDescription") : 
    document.all.photoDescription;
    
  date = document.getElementById ? 
    document.getElementById("date") : 
    document.all.date;
    
  mapLocation = document.getElementById ? 
    document.getElementById("mapLocation") : 
    document.all.mapLocation;
    
  imgFullsize = document.getElementById ? 
    document.getElementById("imgFullsize") : 
    document.all.imgFullsize;
    
  MainDisplayPanel = document.getElementById ? 
    document.getElementById("MainDisplayPanel") : 
    document.all.MainDisplayPanel;
    
  ThumbnailsPanel = document.getElementById ? 
    document.getElementById("ThumbnailsPanel") : 
    document.all.ThumbnailsPanel;
    
  ToggleThumbnailsLink = document.getElementById ? 
    document.getElementById("ToggleThumbnailsLink") : 
    document.all.ToggleThumbnailsLink;

  MainDisplayPanelShown = false; // Flag:Start
  MainDisplayPanel.style.display = "none"; // Flag:Start
  GalleryTitle.style.display = "none"; // Flag:Start
  ThumbnailsPanel.style.display = "block"; // Flag:Start
  SetThumbnailPanel()

  // This function must be found in each XML or HTML file
  // that imports this file:
  InitData();
  
  // Validate imgages path
  var imgMap = new Image();
  imgMap.onerror = function() {
    imageMap = 'img_map.gif';
    imageStop = 'img_stop.gif';
    imagePlay = 'img_play.gif';
    imageBlank = 'img_blank.gif';
  };
  imgMap.src = imageMap;

  // Load the first image so that there is something always displayed
  // in selectedImage
  if (numImages)
    LoadImage(images[0].getFilename(), 0);
}

function LoadImage(fileName, index, abruptJump /*optional - true for JumpToCenterImage()*/) {
  var folder = (images[index].directoryName ? images[index].directoryName : folderName);
  	
  selectedImage.src = imageBlank;   //  selectedImage.src="";

  // Display Image Loading Text
  DisplayImageLoadingText();
  
  // Set index
  if (centerIndex != index) {
    if (abruptJump) {
      JumpToCenterImage(index, centerIndex);
    }
    else {
      SlideToCenterImage(index, centerIndex);
    }
    previousIndex = currentIndex;
    currentIndex = index;
    centerIndex = index;
  }

  // We want to load the actual image after a tiny delay
  // so that we have enough time to display the blank 'img_blank.gif'
  // image.  This way, we can avoid the unsightly effect
  // where the previous image shrinks/distorts before the
  // next image loads:
  // (sanitize quotes to prevent problems when there are
  // double-quotes in the title)
  setTimeout('LoadImageAfterDelay("' + folder + '/' + image_folder + fileName + '", "' + sanitize_quotes(images[index].title) +'", "' + (images[index].getWidth() * size_multiplier) + '", "' + (images[index].getHeight() * size_multiplier) + '")', 300);

  // Set Infos image
  selectedImage.src = folder + '/' + image_folder + fileName
  selectedImage.alt = images[index].title;
	selectedImage.width = (images[index].getWidth() * size_multiplier);
  selectedImage.height = (images[index].getHeight() * size_multiplier);
	
	// Add Url to image
	if (imagesFullsize == '') {
	  imgFullsize.innerHTML = outerHTML(selectedImage);
	}
	else {
		imgFullsize.innerHTML = '<a href=' + '"' + folder + '/' + imagesFullsize + '/' + fileName + '"' + ' target=_blank>' + outerHTML(selectedImage) + '</a>';
	}

  // Load Text
  LoadText(index);
}

// This text displays while the selected image is loading
function DisplayImageLoadingText() {
  title.innerHTML = "Un instant! Chargement... / Please wait! Loading..."; // Flag:Wait
  photoDescription.innerHTML = "";
  date.innerHTML = "";
  mapLocation.innerHTML = "";
}

function LoadText(ind) {
  var __title = images[ind].getTitle();
  var __date = images[ind].getDate();
  var __description = images[ind].getDescription();
  var __location = images[ind].getLocation();
  
  title.innerHTML = __title;
  
  if (__date) {
    date.innerHTML = '(' + __date + ')';
  }
  
  photoDescription.innerHTML = __description;
  
  if (__location) {
  	mapLocation.innerHTML = '<a target="_blank" href="http://maps.google.ca/maps?f=d&amp;source=s_d&amp;saddr=' + __location + '"><img src="' + imageMap + '" /></a>'; // Flag:UrlBrowser
  }
      
  picIndex.innerHTML = (ind + 1);
}

function SetThumbnailPanel() {
  if (MainDisplayPanelShown) {
    MainDisplayPanel.style.display = "block";
    GalleryTitle.style.display = "block";
    ThumbnailsPanel.style.display = "none";
    ToggleThumbnailsLink.innerHTML = "Afficher petites images / Show thumbnail images"; // Flag:ShowSmall
  }
  else {
    MainDisplayPanel.style.display = "none";
    GalleryTitle.style.display = "none";
    ThumbnailsPanel.style.display = "block";
    ToggleThumbnailsLink.innerHTML = "Afficher grandes images / Show large images"; // Flag:ShowLarge
  }
}

function ToggleThumbnailPanel() {
  if (MainDisplayPanelShown) {
    MainDisplayPanel.style.display = "none";
    GalleryTitle.style.display = "none";
    ThumbnailsPanel.style.display = "block";
    ToggleThumbnailsLink.innerHTML = "Afficher grandes images / Show large images"; // Flag:ShowLarge
    MainDisplayPanelShown = false;
  }
  else {
    MainDisplayPanel.style.display = "block";
    GalleryTitle.style.display = "block";
    ThumbnailsPanel.style.display = "none";
    ToggleThumbnailsLink.innerHTML = "Afficher petites images / Show thumbnail images"; // Flag:ShowSmall
    MainDisplayPanelShown = true;
  }
}

function SkipToImage(filename, index) {
  ToggleThumbnailPanel();
  LoadImage(filename, index, true);
}

function checkBrowserWidth() {
  var theWidth = getBrowserWidth();

  // We really don't want to shrink the image because it looks quite ugly,
  // so only do it if the browser window is way small
  if (theWidth > 800) {
    size_multiplier = 1;
  }
  else {
    size_multiplier = 0.75;
  }

  // Resize the current image
  if (selectedImage) { 
    selectedImage.width = (images[currentIndex].getWidth() * size_multiplier);
    selectedImage.height = (images[currentIndex].getHeight() * size_multiplier);
  }

  return true;
}

function getBrowserWidth() {
  if (window.innerWidth) {
    return window.innerWidth;
  }
  else if (document.documentElement && document.documentElement.clientWidth != 0) {
    return document.documentElement.clientWidth;
  }
  else if (document.body) {
    return document.body.clientWidth;
  }
	
  return 0;
}

function outerHTML(node){
  // if IE, Chrome take the internal method otherwise build one
  return node.outerHTML || (       
  function(n){           
    var div = document.createElement('div'), h;           
    div.appendChild( n.cloneNode(true) );           
    h = div.innerHTML;           
    div = null;           
    return h;       
  })(node);   
} 

function LoadImageAfterDelay(mySrc, myAlt, myWidth, myHeight) {
  selectedImage.src = mySrc;
  selectedImage.alt = myAlt;
  selectedImage.width = myWidth;
  selectedImage.height = myHeight;
}

function CenterOnCurrentImage() {
  photoSlider.style.left = (-1 * currentIndex * totalImageWidth) + "px";
  centerIndex = currentIndex;
}

function SelectCenterImage() {
  previousIndex = currentIndex;
  currentIndex = centerIndex;
  LoadImage(images[currentIndex].getFilename(), currentIndex);
}

function slideleft() {
  if (nbSlider == 3) {
    sliderOffset = 300;
  }
  else {
    sliderOffset = 0;
  }  
  if ((-1 * parseInt(photoSlider.style.left)) + parseInt(sliderwidth) < (actualwidth - horizontalPos) - sliderOffset) {
    photoSlider.style.left = parseInt(photoSlider.style.left)-slidespeed+"px"
    mod = (parseInt(photoSlider.style.left) % totalImageWidth);

    if (mod == 0) {
      if (currentIndex < (numImages - 1))
        previousIndex = currentIndex;
        currentIndex += 1;
        centerIndex += 1;

      if (!buttonHeldDown) {
        clearInterval(timerVal);
        LoadImage(images[currentIndex].getFilename(), currentIndex);
        isSliding = false;
      }
    }
  }
  else {
    clearInterval(timerVal);
    LoadImage(images[currentIndex].getFilename(), currentIndex);
    isSliding = false;
  }
}

function slideright() {
  if (parseInt(photoSlider.style.left) < (horizontalPos)) {
    photoSlider.style.left = parseInt(photoSlider.style.left)+slidespeed+"px"
    mod = (parseInt(photoSlider.style.left) % totalImageWidth);

    if (mod == 0) {
      if (currentIndex > 0)
        previousIndex = currentIndex;
        currentIndex -= 1;
        centerIndex -= 1;

      if (!buttonHeldDown) {
        clearInterval(timerVal);
        LoadImage(images[currentIndex].getFilename(), currentIndex);
        isSliding = false;
      }
    }
  }
  else {
    clearInterval(timerVal);
    LoadImage(images[currentIndex].getFilename(), currentIndex);
    isSliding = false;
  }
}

// Quickly jumps x pictures to the left
function jumpleft(x) {
  if (nbSlider == 3) {
    sliderOffset = 300;
  }
  else {
    sliderOffset = 0;
  }  
  if ((-1 * parseInt(photoSlider.style.left)) + parseInt(sliderwidth) < (actualwidth - horizontalPos) - sliderOffset) {
    photoSlider.style.left = parseInt(photoSlider.style.left)-rapidSlideSpeed+"px"
    mod = (parseInt(photoSlider.style.left) % totalImageWidth);

    if (mod == 0) {
      if (slideCount >= x) {
        clearInterval(jumptime);
        isSliding = false;
      }
      else
        slideCount++;
    }
  }
  else {
    clearInterval(jumptime);
    isSliding = false;
  }
}

function shiftCenterIndex(x) {
  centerIndex += x;

  if (centerIndex < 0) 
    centerIndex = 0;

  if (centerIndex >= numImages) 
    centerIndex = numImages - 1;
}

// Quickly jumps x pictures to the right
function jumpright(x) {
  if (parseInt(photoSlider.style.left) < (horizontalPos)) {
    photoSlider.style.left = parseInt(photoSlider.style.left)+rapidSlideSpeed+"px"
    mod = (parseInt(photoSlider.style.left) % totalImageWidth);

    if (mod == 0) {
      if (slideCount >= x) {
        clearInterval(jumptime);
        isSliding = false;
      }
      else
        slideCount++;
    }
  }
  else {
    clearInterval(jumptime);
    isSliding = false;
  }
}

function SlideToCenterImage(index, centerIndex) {
  var deltaPos = index - centerIndex;

  slideCount = 1;
  clearInterval(jumptime); 
  if (deltaPos > 0) {
    jumptime = setInterval("jumpleft(" + deltaPos + ")", 30);
  }
  else if (deltaPos < 0) {
    jumptime = setInterval("jumpright(" + (-1 * deltaPos) + ")", 30);
  }
}

// Abruptly jumps to the center index
function JumpToCenterImage(index, centerIndex) {
  var photoSliderLeft = parseInt(photoSlider.style.left);
  // Remember the 'px' or it won't work with XHTML!!!
  photoSlider.style.left = (photoSliderLeft - ((index - centerIndex) * totalImageWidth)) + "px";
}

function PrevPicHandler() {
  if (!isSliding) {
    CenterOnCurrentImage(); 
    isSliding = true;
    clearInterval(timerVal); 
    timerVal = setInterval("slideright()", 25);
    buttonHeldDown = true;
  }
}

function NextPicHandler () {
  if (!isSliding) {
    CenterOnCurrentImage(); 
    isSliding = true;
    clearInterval(timerVal); 
    timerVal = setInterval("slideleft()", 25);
    buttonHeldDown = true;
  }
}

function chkIfNum(TimeSlideShow)
{
  if (isNaN(TimeSlideShow) == false)
  {
    return false;
  }
}

function SlideShow () {
  
  if (!SlideShowRunning) {  // ***** IF SlideShow NOT Running *****
    // If Play on the last image, goto first image before playing
    if (currentIndex == numImages - 1) {
        SelectFirstImage();
    }
      
    // document.images["SlideShowButton"].alt= "Stop SlideShow";
    document.images["SlideShowButton"].src = imageStop;
    document.getElementById('inputTimeSlideShow').disabled = true;
    
    // Set TimeSlideShow
    var TimeSlideShow = document.getElementById('inputTimeSlideShow').value;
    if (isNaN(TimeSlideShow) == true) {
      document.getElementById('inputTimeSlideShow').value = "5";
      TimeSlideShow = "5";
    }
    TimeSlideShow = TimeSlideShow * 1000;
    if (TimeSlideShow == '0') {
      document.getElementById('inputTimeSlideShow').value = "5";
      TimeSlideShow = "5000";
    }
    
    // PlaySlideShow
    mySlideShow = setInterval("PlaySlideShow()",TimeSlideShow);
    SlideShowRunning = true;
  }
  else {  // ***** IF SlideShow Running *****
    // StopSlideShow
    StopSlideShow();
  }
}

function PlaySlideShow () {
    if (!isSliding) {
      CenterOnCurrentImage();
      isSliding = true;
      clearInterval(timerVal);
      if (currentIndex < (numImages - 1)) {
         timerVal = setInterval("slideleft()", 25);
      }
      else {
        // StopSlideShow
        StopSlideShow();
        SelectFirstImage();
        SlideShow();
      }
   }
}

function StopSlideShow () {
  // document.images["SlideShowButton"].alt= "Play SlideShow";
  document.images["SlideShowButton"].src = imagePlay;
  document.getElementById('inputTimeSlideShow').disabled = false;
  clearInterval(mySlideShow);
  SlideShowRunning = false;
}

function SelectFirstImage () {
    CenterOnCurrentImage();
    slideCount = 1; 
    isSliding = true;
    var iSlidIndex = numImages - currentIndex -1;
    clearInterval(iSlidIndex);
    shiftCenterIndex(iSlidIndex);
    jumptime = setInterval("jumpright(" + iSlidIndex + ")",10);
    LoadImage(images[0].getFilename(), 0);
}    

function JumpRightHandler() {
  if (!isSliding) {
    slideCount = 1;
    isSliding = true;
    clearInterval(jumptime);
    shiftCenterIndex(3);
    jumptime = setInterval("jumpleft(3)",10);
  }
}

function JumpLeftHandler() {
  if (!isSliding) {
    slideCount = 1;
    isSliding = true;
    clearInterval(jumptime);
    shiftCenterIndex(-3);
    jumptime = setInterval("jumpright(3)",10);
  }
}
